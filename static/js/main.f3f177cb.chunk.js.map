{"version":3,"sources":["components/AddTodo.jsx","components/Todolist.jsx","components/SearchTodo.jsx","constants/data.js","App.jsx","hooks/useApp.js","reportWebVitals.js","index.js"],"names":["AddTodo","props","addInputValue","handleChangeAddInputTodo","handleAddTodo","className","type","value","placeholder","onChange","onKeyPress","Todolist","filteredList","handleRemoveTodo","handleOnEdit","map","todo","index","title","event","target","onClick","id","SearchTodo","searchKeyword","handleChangeSearchKeyword","INIT_TODO_LIST","INIT_TODO_LIST_COUNT","length","App","useState","todos","setTodos","setAddInputValue","uniqueId","setUniqueId","setSearchKeyword","filter","val","toString","toLowerCase","startsWith","key","nextUniqueId","targetId","targetTitle","window","confirm","newTodos","todoIndex","useApp","states","actions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3f177cb.chunk.js","sourcesContent":["/**\n * AddTodo\n * @package components\n */\nimport React from \"react\";\n\n/**\n * AddTodo\n * @param {*} props\n * @returns\n */\nexport const AddTodo = (props) => {\n  //propsの定義\n  const { addInputValue, handleChangeAddInputTodo, handleAddTodo } = props;\n\n  return (\n    <div>\n      <h2>ADD TASK</h2>\n      <div className=\"task-area\">\n        <input\n          type=\"text\"\n          className=\"inputArea\"\n          value={addInputValue}\n          placeholder=\"New Task\"\n          onChange={handleChangeAddInputTodo}\n          onKeyPress={handleAddTodo}\n        />\n      </div>\n    </div>\n  );\n};\n","/**\n * TodoList\n * @package components\n */\nimport React from \"react\";\n\n/**\n * TodoList\n * @param {*} props\n * @returns\n */\nexport const Todolist = (props) => {\n  //props\n  const { filteredList, handleRemoveTodo, handleOnEdit } = props;\n\n  return (\n    <div className=\"task-area\">\n      <ul className=\"todolist\">\n        {filteredList.map((todo, index) => (\n          <li className=\"todo\" key={todo.id}>\n            <input\n              type=\"text\"\n              className=\"editForm\"\n              value={todo.title}\n              onChange={(event) => handleOnEdit(index, event.target.value)}\n            />\n            <span onClick={() => handleRemoveTodo(todo.id, todo.title)}>\n              <i className=\"far fa-trash-alt\"></i>\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","/**\n * SearchTodo\n * @package components\n */\nimport React from \"react\";\n\n/**\n * SearchTodo\n * @param {*} props\n * @returns\n */\nexport const SearchTodo = (props) => {\n  const { searchKeyword, handleChangeSearchKeyword } = props;\n\n  return (\n    <div className=\"task-area\">\n      <input\n        type=\"text\"\n        className=\"inputArea\"\n        placeholder=\"Search Keyword\"\n        value={searchKeyword}\n        onChange={handleChangeSearchKeyword}\n      />\n\n      {/* { props.todos.filter((val) => {\n        if (search === \"\") {\n          return val;\n        } else if (\n          val.task.toLowerCase().includes(search.toLowerCase())\n          ) {\n            return val;\n          }\n        }).map((todo, index) => (\n          <li key={ index }><input type=\"text\" value={todo.task} onChange={(event) => handleOnEdit(index, event.target.value)} />\n          <span onClick={() => handleRemoveTask(index) }><i className=\"far fa-trash-alt fa-pull-right\"></i></span></li>\n        ))} */}\n    </div>\n  );\n};\n","/**\n * data\n * @package constants\n */\n\n/**\n * Todoリスト初期値\n */\nexport const INIT_TODO_LIST = [\n  {\n    id: 1,\n    title: \"Task1\",\n  },\n  {\n    id: 2,\n    title: \"Task2\",\n  },\n];\n\n/**\n * Todoリスト数の初期値\n * 配列の数を取ってきている\n */\nexport const INIT_TODO_LIST_COUNT = INIT_TODO_LIST.length;\n","/**\n * App\n * @package src\n */\n\nimport React from \"react\";\n/** components */\nimport { AddTodo } from \"./components/AddTodo\";\nimport { Todolist } from \"./components/Todolist\";\nimport { SearchTodo } from \"./components/SearchTodo\";\n/* hooks */\nimport { useApp } from \"./hooks/useApp\";\n/** styles */\nimport \"./App.css\";\n\n/**\n * App\n * @returns\n */\nexport const App = () => {\n  /* hooks */\n  const [states, actions] = useApp();\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Rare List</h1>\n      <AddTodo\n        addInputValue={states.addInputValue}\n        handleChangeAddInputTodo={actions.handleChangeAddInputTodo}\n        handleAddTodo={actions.handleAddTodo}\n      />\n      <SearchTodo\n        todos={states.todos}\n        value={states.searchKeyword}\n        handleChangeSearchKeyword={actions.handleChangeSearchKeyword}\n      />\n      <Todolist\n        todos={states.todos}\n        searchKeyword={states.searchKeyword}\n        filteredList={actions.filteredList}\n        handleRemoveTodo={actions.handleRemoveTodo}\n        handleOnEdit={actions.handleOnEdit}\n      />\n    </div>\n  );\n};\n","/**\n * useApp\n */\nimport { useState } from \"react\";\n/* constants */\nimport { INIT_TODO_LIST, INIT_TODO_LIST_COUNT } from \"../constants/data\";\n\n/**\n * useApp\n * @returns\n */\nexport const useApp = () => {\n  // todoリストの初期値\n  const [todos, setTodos] = useState(INIT_TODO_LIST);\n  // タスク追加用の入力値\n  const [addInputValue, setAddInputValue] = useState(\"\");\n  //todo 採番ID\n  const [uniqueId, setUniqueId] = useState(INIT_TODO_LIST_COUNT);\n  // Searchコンポーネントで入力されたキーワードを保存するステート\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n\n  /**\n   *タスクが入力されたらデータを保持する処理、更新処理\n   * @param {*} event\n   */\n  const handleChangeAddInputTodo = (event) => {\n    setAddInputValue(event.target.value);\n  };\n\n  /**\n   * タスク追加処理\n   * @param {*} event\n   */\n  const handleAddTodo = (event) => {\n    // エンターキーが押された時にTodoを追加する\n    if (event.key === \"Enter\" && addInputValue !== \"\") {\n      const nextUniqueId = uniqueId + 1;\n      setTodos([\n        ...todos,\n        {\n          id: nextUniqueId,\n          title: addInputValue,\n        },\n      ]);\n      //採番IDを更新\n      setUniqueId(nextUniqueId);\n      //todo追加後、入力値をリセットする\n      setAddInputValue(\"\");\n    }\n  };\n  /**\n   * タスク削除処理\n   * @param {*} index\n   * 削除する時にconfirmを出している\n   */\n  const handleRemoveTodo = (targetId, targetTitle) => {\n    if (window.confirm(` 「${targetTitle}」のtodoを削除しますか？`)) {\n      // 削除するid以外のtodoリストを再編集\n      const newTodos = todos.filter((todo) => todo.id !== targetId);\n      setTodos(newTodos);\n    }\n  };\n\n  /**\n   * タスク編集処理\n   * @param {*} index\n   * @param {*} value\n   */\n  const handleOnEdit = (index, value) => {\n    const newTodos = todos.map((todo, todoIndex) => {\n      if (todoIndex === index) {\n        todo.title = value;\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n\n  /**\n   * 検索キーワード更新処理 キーワードを保持する\n   * @param {*} event\n   */\n  const handleChangeSearchKeyword = (event) => {\n    setSearchKeyword(event.target.value);\n  };\n\n  /**\n   * 検索キーワードフィルター処理\n   */\n  const filteredList = todos.filter((val) => {\n    if (searchKeyword === \"\") {\n      return val;\n    } else if (\n      val.title\n        .toString()\n        .toLowerCase()\n        .startsWith(searchKeyword.toString().toLowerCase())\n    ) {\n      return val;\n    }\n    return false;\n  });\n  /**\n   * hooksの返り値\n   * 第一引数、state\n   * 第二引数、関数、変数\n   */\n  return [\n    {\n      todos,\n      addInputValue,\n      searchKeyword,\n    },\n    {\n      handleChangeAddInputTodo,\n      handleAddTodo,\n      handleRemoveTodo,\n      handleOnEdit,\n      handleChangeSearchKeyword,\n      filteredList,\n    },\n  ];\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}